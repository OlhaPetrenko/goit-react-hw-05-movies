{"version":3,"file":"static/js/76.1d2dfe3f.chunk.js","mappings":"oQACA,EAAuB,mBAAvB,EAAiD,mBAAjD,EAA8E,sBAA9E,EAA2G,mB,SCKrGA,EAAU,+BACVC,EAAM,mCA4DZ,MA1DA,WACE,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,oGAEIH,GAAW,GAFf,SAG2BI,IAAAA,IAAA,WACjBZ,EADiB,kBACAE,EADA,4BAC2BD,EAD3B,oBAH3B,OAGUY,EAHV,OAOIP,EAAQO,EAASC,KAAKT,MAP1B,gDASIK,EAAS,EAAD,IATZ,yBAWIF,GAAW,GAXf,6EADc,uBAAC,WAAD,wBAedO,EACD,GAAE,CAACb,KAGF,gCACGK,IACC,eAAIS,UAAWC,EAAf,iMAEDZ,IACC,wBACGA,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,aAAxB,OACR,gBAAaN,UAAWC,EAAxB,UACGK,GACC,gBACEC,IAAG,6CAAwCD,GAC3CE,IAAI,OACJC,MAAM,SAGR,cAAGT,UAAWC,EAAd,+HAEF,4BACE,eAAGD,UAAWC,EAAd,cAAwBG,MACxB,uCAAeC,UAZVF,EADD,MAmBG,IAAhBd,EAAKqB,SAAiBnB,IACrB,yTAEDE,IAAS,wBAAKA,EAAMkB,YAG1B,C","sources":["webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Item\":\"Cast_Item__NILYu\",\"Name\":\"Cast_Name__OE03j\",\"NoPhoto\":\"Cast_NoPhoto__B19ZH\",\"Load\":\"Cast_Load__rIr47\"};","import axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport s from './Cast.module.css';\n\nconst BASEURL = 'https://api.themoviedb.org/3';\nconst KEY = '5b0447e2e1e726ae474ba46ec861fdf3';\n\nfunction Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function findCast() {\n      try {\n        setLoading(true);\n        const response = await axios.get(\n          ` ${BASEURL}/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n        );\n\n        setCast(response.data.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    findCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && (\n        <h2 className={s.Load}>Відбувається завантаження даних...</h2>\n      )}\n      {cast && (\n        <ul>\n          {cast.map(({ id, name, character, profile_path }) => (\n            <li key={id} className={s.Item}>\n              {profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/original${profile_path}`}\n                  alt=\"name\"\n                  width=\"100\"\n                />\n              ) : (\n                <p className={s.NoPhoto}>Фото актора відсутнє! </p>\n              )}\n              <div>\n                <p className={s.Name}> {name}</p>\n                <p>character: {character}</p>\n              </div>\n            </li>\n          ))}\n        </ul>\n      )}\n      {cast.length === 0 && !loading && (\n        <h2> На жаль, інформація щодо акторського складу відсутня :-(((</h2>\n      )}\n      {error && <h2>{error.message}</h2>}\n    </>\n  );\n}\n\nexport default Cast;\n"],"names":["BASEURL","KEY","movieId","useParams","useState","cast","setCast","loading","setLoading","error","setError","useEffect","axios","response","data","findCast","className","s","map","id","name","character","profile_path","src","alt","width","length","message"],"sourceRoot":""}